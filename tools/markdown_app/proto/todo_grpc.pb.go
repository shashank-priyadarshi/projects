// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: todo.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarkdownApplicationClient is the client API for MarkdownApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarkdownApplicationClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Items, error)
	Parse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Error, error)
	Add(ctx context.Context, in *Items, opts ...grpc.CallOption) (*Error, error)
	Edit(ctx context.Context, in *Items, opts ...grpc.CallOption) (*Error, error)
	Delete(ctx context.Context, in *UIDs, opts ...grpc.CallOption) (*Error, error)
}

type markdownApplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewMarkdownApplicationClient(cc grpc.ClientConnInterface) MarkdownApplicationClient {
	return &markdownApplicationClient{cc}
}

func (c *markdownApplicationClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/proto.MarkdownApplication/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownApplicationClient) Parse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/proto.MarkdownApplication/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownApplicationClient) Add(ctx context.Context, in *Items, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/proto.MarkdownApplication/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownApplicationClient) Edit(ctx context.Context, in *Items, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/proto.MarkdownApplication/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownApplicationClient) Delete(ctx context.Context, in *UIDs, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/proto.MarkdownApplication/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarkdownApplicationServer is the server API for MarkdownApplication service.
// All implementations must embed UnimplementedMarkdownApplicationServer
// for forward compatibility
type MarkdownApplicationServer interface {
	List(context.Context, *emptypb.Empty) (*Items, error)
	Parse(context.Context, *emptypb.Empty) (*Error, error)
	Add(context.Context, *Items) (*Error, error)
	Edit(context.Context, *Items) (*Error, error)
	Delete(context.Context, *UIDs) (*Error, error)
	mustEmbedUnimplementedMarkdownApplicationServer()
}

// UnimplementedMarkdownApplicationServer must be embedded to have forward compatible implementations.
type UnimplementedMarkdownApplicationServer struct {
}

func (UnimplementedMarkdownApplicationServer) List(context.Context, *emptypb.Empty) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMarkdownApplicationServer) Parse(context.Context, *emptypb.Empty) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedMarkdownApplicationServer) Add(context.Context, *Items) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMarkdownApplicationServer) Edit(context.Context, *Items) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedMarkdownApplicationServer) Delete(context.Context, *UIDs) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMarkdownApplicationServer) mustEmbedUnimplementedMarkdownApplicationServer() {}

// UnsafeMarkdownApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarkdownApplicationServer will
// result in compilation errors.
type UnsafeMarkdownApplicationServer interface {
	mustEmbedUnimplementedMarkdownApplicationServer()
}

func RegisterMarkdownApplicationServer(s grpc.ServiceRegistrar, srv MarkdownApplicationServer) {
	s.RegisterService(&MarkdownApplication_ServiceDesc, srv)
}

func _MarkdownApplication_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownApplicationServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MarkdownApplication/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownApplicationServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkdownApplication_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownApplicationServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MarkdownApplication/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownApplicationServer).Parse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkdownApplication_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Items)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownApplicationServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MarkdownApplication/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownApplicationServer).Add(ctx, req.(*Items))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkdownApplication_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Items)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownApplicationServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MarkdownApplication/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownApplicationServer).Edit(ctx, req.(*Items))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarkdownApplication_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownApplicationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MarkdownApplication/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownApplicationServer).Delete(ctx, req.(*UIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// MarkdownApplication_ServiceDesc is the grpc.ServiceDesc for MarkdownApplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarkdownApplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MarkdownApplication",
	HandlerType: (*MarkdownApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MarkdownApplication_List_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _MarkdownApplication_Parse_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MarkdownApplication_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _MarkdownApplication_Edit_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MarkdownApplication_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
